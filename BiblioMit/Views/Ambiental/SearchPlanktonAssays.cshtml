
@{
    ViewData["Title"] = Localizer["Search Plankton Assays"].Value;
}

<partial name="_Libs" model='new HashSet<string> { "choices.js", "bootstrap-datepicker" }' />

<h1>@ViewData["Title"]</h1>

<form id="params">
    <div class="form-group">
        <label>Rango de fecha</label>
        <div class="input-group input-daterange">
            <input id="start" type="text"
                   class="form-control actual_range"
                   value="@ViewData["start"]">
            <div class="input-group-append">
                <div class="input-group-text">
                    a
                </div>
            </div>
            <input id="end" type="text"
                   class="form-control actual_range"
                   value="@ViewData["end"]">
        </div>
    </div>
    <div class="form-group">
        <label for="type">@Localizer["Type of area"]</label>
        <select class="form-control" name="type" id="type">
            <option value="1">Cuenca</option>
            <option value="2">Comuna</option>
            <option value="3">Psmb</option>
        </select>
    </div>
    <div class="form-group">
        <label for="code">@Localizer["Name or Code"]</label>
        <input class="form-control" type="text" id="code" name="code" />
    </div>
    <div class="form-group">
        <button class="form-control" onclick="fetchPlankton()">@Localizer["Search"]</button>
    </div>
</form>
<div id="results">
</div>

@section Scripts{ 
    <script>
        const epsmb = document.getElementById('psmb');
        const psmb = new Choices(epsmb, choiceOps);
        $('.input-daterange').datepicker({
            inputs: $('.actual_range'),
            format: 'yyyy-mm-dd',
            language: 'es',
            startDate: $('#start').val().toString(),
            endDate: $('#end').val().toString()
        })
    function CreateTableFromJSON(json) {
        // EXTRACT VALUE FOR HTML HEADER.
        // ('Book ID', 'Book Name', 'Category' and 'Price')
        var col = [];
        for (var i = 0; i < json.length; i++) {
            for (var key in json[i]) {
                if (col.indexOf(key) === -1) {
                    col.push(key);
                }
            }
        }
        // CREATE DYNAMIC TABLE.
        var table = document.createElement("table");

        // CREATE HTML TABLE HEADER ROW USING THE EXTRACTED HEADERS ABOVE.

        var tr = table.insertRow(-1);                   // TABLE ROW.

        for (var i = 0; i < col.length; i++) {
            var th = document.createElement("th");      // TABLE HEADER.
            th.innerHTML = col[i];
            tr.appendChild(th);
        }

        // ADD JSON DATA TO THE TABLE AS ROWS.
        for (var i = 0; i < json.length; i++) {
            tr = table.insertRow(-1);
            for (var j = 0; j < col.length; j++) {
                var tabCell = tr.insertCell(-1);
                tabCell.innerHTML = json[i][col[j]];
            }
        }
        // FINALLY ADD THE NEWLY CREATED TABLE WITH JSON DATA TO A CONTAINER.
        var divContainer = document.getElementById("results");
        divContainer.innerHTML = "";
        divContainer.appendChild(table);
        }
        function fetchPlankton() {
            var data = $("params").serialize();
            fetch(url, {
                method: 'POST',
                headers: { 'Content-Type': 'aplication/json' },
                body: body: JSON.stringify(data)
            }).then(r => r.json()).then(j => CreateTableFromJSON(json));
        }
    </script>
}