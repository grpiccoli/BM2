// <auto-generated />
using System;
using BiblioMit.Data;
using BiblioMit.Models;
using BiblioMit.Models.Entities.Centres;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BiblioMit.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BiblioMit.Models.Analist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique();

                    b.ToTable("Analists");
                });

            modelBuilder.Entity("BiblioMit.Models.Analysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("FarmId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FarmId");

                    b.ToTable("Analyses");
                });

            modelBuilder.Entity("BiblioMit.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("BiblioMit.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Last")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("MemberSince")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("BiblioMit.Models.AreaCode", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AreaCodes");
                });

            modelBuilder.Entity("BiblioMit.Models.AreaCodeProvince", b =>
                {
                    b.Property<int>("AreaCodeId")
                        .HasColumnType("int");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("AreaCodeId", "ProvinceId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("AreaCodeProvinces");
                });

            modelBuilder.Entity("BiblioMit.Models.CatchmentArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PolygonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PolygonId")
                        .IsUnique();

                    b.ToTable("CatchmentAreas");
                });

            modelBuilder.Entity("BiblioMit.Models.Census", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int?>("LocalityId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Year")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LocalityId");

                    b.ToTable("Census");
                });

            modelBuilder.Entity("BiblioMit.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Acronym")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedBusinessName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedTradeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TradeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("BiblioMit.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CloseHr")
                        .HasColumnType("datetime2");

                    b.Property<int>("ConsessionOrResearchId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Last")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OpenHr")
                        .HasColumnType("datetime2");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("Phone")
                        .HasColumnType("bigint");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConsessionOrResearchId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("BiblioMit.Models.Coordinate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("PolygonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PolygonId");

                    b.ToTable("Coordinates");
                });

            modelBuilder.Entity("BiblioMit.Models.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Address")
                        .IsUnique();

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("BiblioMit.Models.Entities.Digest.Header", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegistryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegistryId");

                    b.ToTable("Headers");
                });

            modelBuilder.Entity("BiblioMit.Models.Entities.Environmental.GenusPhytoplankton", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("NormalizedName")
                        .IsUnique();

                    b.ToTable("GenusPhytoplanktons");
                });

            modelBuilder.Entity("BiblioMit.Models.Entry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Added")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Max")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Min")
                        .HasColumnType("datetime2");

                    b.Property<int>("Observations")
                        .HasColumnType("int");

                    b.Property<string>("OutPut")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Success")
                        .HasColumnType("bit");

                    b.Property<int>("Updated")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Entries");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Entry");
                });

            modelBuilder.Entity("BiblioMit.Models.Forum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Forums");
                });

            modelBuilder.Entity("BiblioMit.Models.Individual", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("ADG")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Depth")
                        .HasColumnType("int");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("Maturity")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("SamplingId")
                        .HasColumnType("int");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SamplingId");

                    b.ToTable("Individuals");
                });

            modelBuilder.Entity("BiblioMit.Models.InputFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("InputFiles");
                });

            modelBuilder.Entity("BiblioMit.Models.Laboratory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Laboratories");
                });

            modelBuilder.Entity("BiblioMit.Models.Larva", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Count")
                        .HasColumnType("float");

                    b.Property<int>("LarvaType")
                        .HasColumnType("int");

                    b.Property<int>("LarvaeId")
                        .HasColumnType("int");

                    b.Property<int>("SpecieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LarvaeId");

                    b.HasIndex("SpecieId");

                    b.ToTable("Larvas");
                });

            modelBuilder.Entity("BiblioMit.Models.Larvae", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("FarmId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FarmId");

                    b.ToTable("Larvaes");
                });

            modelBuilder.Entity("BiblioMit.Models.Locality", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Discriminator")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Localities");

                    b.HasDiscriminator<int>("Discriminator");
                });

            modelBuilder.Entity("BiblioMit.Models.Origin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Origins");
                });

            modelBuilder.Entity("BiblioMit.Models.Phone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique()
                        .HasFilter("[Number] IS NOT NULL");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("BiblioMit.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IndividualId")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Magnification")
                        .HasColumnType("int");

                    b.Property<int?>("SoftId")
                        .HasColumnType("int");

                    b.Property<int?>("ValveId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IndividualId");

                    b.HasIndex("SoftId");

                    b.HasIndex("ValveId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("BiblioMit.Models.PhylogeneticGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("PhylogeneticGroups");
                });

            modelBuilder.Entity("BiblioMit.Models.Phytoplankton", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("C")
                        .HasColumnType("float");

                    b.Property<int?>("EAR")
                        .HasColumnType("int");

                    b.Property<int>("PlanktonAssayId")
                        .HasColumnType("int");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SpeciesId");

                    b.HasIndex("PlanktonAssayId", "SpeciesId")
                        .IsUnique();

                    b.ToTable("Phytoplanktons");
                });

            modelBuilder.Entity("BiblioMit.Models.PlanktonAssay", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("AnalistId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AssayEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AssayStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LaboratoryId")
                        .HasColumnType("int");

                    b.Property<int>("NoSamples")
                        .HasColumnType("int");

                    b.Property<double?>("Oxigen")
                        .HasColumnType("float");

                    b.Property<double?>("Ph")
                        .HasColumnType("float");

                    b.Property<int?>("PhoneId")
                        .HasColumnType("int");

                    b.Property<int>("PsmbId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReceptionDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Salinity")
                        .HasColumnType("float");

                    b.Property<DateTime>("SamplingDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SamplingEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("StationId")
                        .HasColumnType("int");

                    b.Property<double?>("Temperature")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AnalistId");

                    b.HasIndex("LaboratoryId");

                    b.HasIndex("PhoneId");

                    b.HasIndex("PsmbId");

                    b.HasIndex("SamplingEntityId");

                    b.HasIndex("StationId");

                    b.ToTable("PlanktonAssays");
                });

            modelBuilder.Entity("BiblioMit.Models.PlanktonAssayEmail", b =>
                {
                    b.Property<int>("PlanktonAssayId")
                        .HasColumnType("int");

                    b.Property<int>("EmailId")
                        .HasColumnType("int");

                    b.HasKey("PlanktonAssayId", "EmailId");

                    b.HasIndex("EmailId");

                    b.ToTable("PlanktonAssayEmails");
                });

            modelBuilder.Entity("BiblioMit.Models.PlantProduct", b =>
                {
                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("PlantId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("PlantProducts");
                });

            modelBuilder.Entity("BiblioMit.Models.Polygon", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("CatchmentAreaId")
                        .HasColumnType("int");

                    b.Property<int?>("LocalityId")
                        .HasColumnType("int");

                    b.Property<int?>("PsmbId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocalityId");

                    b.ToTable("Polygons");
                });

            modelBuilder.Entity("BiblioMit.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("ForumId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ForumId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("BiblioMit.Models.PostReply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostReplies");
                });

            modelBuilder.Entity("BiblioMit.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("BiblioMit.Models.Psmb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Acronym")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<int?>("CommuneId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("Discriminator")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PolygonId")
                        .HasColumnType("int");

                    b.Property<int?>("WaterBody")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Acronym")
                        .IsUnique()
                        .HasFilter("[Acronym] IS NOT NULL");

                    b.HasIndex("CommuneId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PolygonId")
                        .IsUnique()
                        .HasFilter("[PolygonId] IS NOT NULL");

                    b.HasIndex("Code", "Discriminator")
                        .IsUnique();

                    b.ToTable("Psmbs");

                    b.HasDiscriminator<int>("Discriminator");
                });

            modelBuilder.Entity("BiblioMit.Models.Registry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Attribute")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DecimalPlaces")
                        .HasColumnType("int");

                    b.Property<string>("DecimalSeparator")
                        .HasColumnType("nvarchar(1)");

                    b.Property<bool?>("DeleteAfter2ndNegative")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InputFileId")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedAttribute")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Operation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InputFileId");

                    b.ToTable("Registries");
                });

            modelBuilder.Entity("BiblioMit.Models.ReproductiveStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Proportion")
                        .HasColumnType("int");

                    b.Property<int>("SpawningId")
                        .HasColumnType("int");

                    b.Property<int>("Stage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SpawningId");

                    b.ToTable("ReproductiveStages");
                });

            modelBuilder.Entity("BiblioMit.Models.Sampling", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("CentreId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double?>("O2")
                        .HasColumnType("float");

                    b.Property<int?>("Salinity")
                        .HasColumnType("int");

                    b.Property<double?>("Temp")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CentreId");

                    b.ToTable("Samplings");
                });

            modelBuilder.Entity("BiblioMit.Models.SamplingEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("SamplingEntities");
                });

            modelBuilder.Entity("BiblioMit.Models.Seed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCuelga")
                        .HasColumnType("datetime2");

                    b.Property<int>("FarmId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FarmId");

                    b.ToTable("Seeds");
                });

            modelBuilder.Entity("BiblioMit.Models.SernapescaDeclaration", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("CentreId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Dato")
                        .HasColumnType("int");

                    b.Property<int>("DeclarationNumber")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ItemType")
                        .HasColumnType("int");

                    b.Property<int?>("OriginId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductionType")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CentreId");

                    b.ToTable("SernapescaDeclarations");

                    b.HasDiscriminator<string>("Discriminator").HasValue("SernapescaDeclaration");
                });

            modelBuilder.Entity("BiblioMit.Models.Soft", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Count")
                        .HasColumnType("int");

                    b.Property<int?>("Degree")
                        .HasColumnType("int");

                    b.Property<int>("IndividualId")
                        .HasColumnType("int");

                    b.Property<int>("SoftType")
                        .HasColumnType("int");

                    b.Property<int>("Tissue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IndividualId");

                    b.ToTable("Softs");
                });

            modelBuilder.Entity("BiblioMit.Models.Spawning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("FarmId")
                        .HasColumnType("int");

                    b.Property<double>("FemaleIG")
                        .HasColumnType("float");

                    b.Property<int>("FemaleProportion")
                        .HasColumnType("int");

                    b.Property<double>("MaleIG")
                        .HasColumnType("float");

                    b.Property<int>("MaleProportion")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FarmId");

                    b.ToTable("Spawnings");
                });

            modelBuilder.Entity("BiblioMit.Models.Specie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sp")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Species");
                });

            modelBuilder.Entity("BiblioMit.Models.SpecieSeed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Capture")
                        .HasColumnType("int");

                    b.Property<double>("Proportion")
                        .HasColumnType("float");

                    b.Property<int>("SeedId")
                        .HasColumnType("int");

                    b.Property<int>("SpecieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeedId");

                    b.HasIndex("SpecieId");

                    b.ToTable("SpecieSeeds");
                });

            modelBuilder.Entity("BiblioMit.Models.SpeciesPhytoplankton", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GenusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GenusId", "NormalizedName")
                        .IsUnique()
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("SpeciesPhytoplanktons");
                });

            modelBuilder.Entity("BiblioMit.Models.Station", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique();

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("BiblioMit.Models.Talla", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Proportion")
                        .HasColumnType("float");

                    b.Property<int>("Range")
                        .HasColumnType("int");

                    b.Property<int>("SpecieSeedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SpecieSeedId");

                    b.ToTable("Tallas");
                });

            modelBuilder.Entity("BiblioMit.Models.Valve", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IndividualId")
                        .HasColumnType("int");

                    b.Property<string>("Species")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ValveType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IndividualId");

                    b.ToTable("Valves");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BiblioMit.Models.SernapescaEntry", b =>
                {
                    b.HasBaseType("BiblioMit.Models.Entry");

                    b.Property<int>("DeclarationType")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("SernapescaEntry");
                });

            modelBuilder.Entity("BiblioMit.Models.Commune", b =>
                {
                    b.HasBaseType("BiblioMit.Models.Locality");

                    b.Property<int?>("CatchmentAreaId")
                        .HasColumnType("int");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasIndex("CatchmentAreaId");

                    b.HasIndex("ProvinceId");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("BiblioMit.Models.Province", b =>
                {
                    b.HasBaseType("BiblioMit.Models.Locality");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.HasIndex("RegionId");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("BiblioMit.Models.Region", b =>
                {
                    b.HasBaseType("BiblioMit.Models.Locality");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("BiblioMit.Models.Entities.Centres.Craft", b =>
                {
                    b.HasBaseType("BiblioMit.Models.Psmb");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("BiblioMit.Models.Entities.Centres.Farm", b =>
                {
                    b.HasBaseType("BiblioMit.Models.Psmb");

                    b.Property<int?>("PsmbAreaId")
                        .HasColumnType("int");

                    b.Property<int?>("RnaInvoice")
                        .HasColumnType("int");

                    b.HasIndex("PsmbAreaId");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("BiblioMit.Models.Entities.Centres.NaturalBed", b =>
                {
                    b.HasBaseType("BiblioMit.Models.Psmb");

                    b.HasDiscriminator().HasValue(6);
                });

            modelBuilder.Entity("BiblioMit.Models.Entities.Centres.Plant", b =>
                {
                    b.HasBaseType("BiblioMit.Models.Psmb");

                    b.Property<bool?>("Certifiable")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("BiblioMit.Models.Entities.Centres.ResearchCentre", b =>
                {
                    b.HasBaseType("BiblioMit.Models.Psmb");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue(5);
                });

            modelBuilder.Entity("BiblioMit.Models.PsmbArea", b =>
                {
                    b.HasBaseType("BiblioMit.Models.Psmb");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("BiblioMit.Models.HarvestDeclaration", b =>
                {
                    b.HasBaseType("BiblioMit.Models.SernapescaDeclaration");

                    b.HasIndex("OriginId");

                    b.HasDiscriminator().HasValue("HarvestDeclaration");
                });

            modelBuilder.Entity("BiblioMit.Models.ProductionDeclaration", b =>
                {
                    b.HasBaseType("BiblioMit.Models.SernapescaDeclaration");

                    b.Property<int?>("PlantId")
                        .HasColumnType("int");

                    b.HasIndex("OriginId");

                    b.HasIndex("PlantId");

                    b.HasDiscriminator().HasValue("ProductionDeclaration");
                });

            modelBuilder.Entity("BiblioMit.Models.SeedDeclaration", b =>
                {
                    b.HasBaseType("BiblioMit.Models.SernapescaDeclaration");

                    b.HasIndex("OriginId")
                        .HasName("IX_SernapescaDeclarations_OriginId1");

                    b.HasDiscriminator().HasValue("SeedDeclaration");
                });

            modelBuilder.Entity("BiblioMit.Models.SupplyDeclaration", b =>
                {
                    b.HasBaseType("BiblioMit.Models.SernapescaDeclaration");

                    b.Property<int?>("CraftId")
                        .HasColumnType("int");

                    b.Property<int?>("PlantId")
                        .HasColumnName("SupplyDeclaration_PlantId")
                        .HasColumnType("int");

                    b.HasIndex("CraftId");

                    b.HasIndex("OriginId");

                    b.HasIndex("PlantId");

                    b.HasDiscriminator().HasValue("SupplyDeclaration");
                });

            modelBuilder.Entity("BiblioMit.Models.ApplicationUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>");

                    b.Property<string>("RoleAssigner")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationUserRole");
                });

            modelBuilder.Entity("BiblioMit.Models.Analysis", b =>
                {
                    b.HasOne("BiblioMit.Models.Entities.Centres.Farm", "Farm")
                        .WithMany("Analyses")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BiblioMit.Models.AreaCodeProvince", b =>
                {
                    b.HasOne("BiblioMit.Models.AreaCode", "AreaCode")
                        .WithMany("AreaCodeProvinces")
                        .HasForeignKey("AreaCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiblioMit.Models.Province", "Province")
                        .WithMany("AreaCodeProvinces")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BiblioMit.Models.CatchmentArea", b =>
                {
                    b.HasOne("BiblioMit.Models.Polygon", "Polygon")
                        .WithOne("CatchmentArea")
                        .HasForeignKey("BiblioMit.Models.CatchmentArea", "PolygonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BiblioMit.Models.Census", b =>
                {
                    b.HasOne("BiblioMit.Models.Locality", "Locality")
                        .WithMany("Censuses")
                        .HasForeignKey("LocalityId");
                });

            modelBuilder.Entity("BiblioMit.Models.Contact", b =>
                {
                    b.HasOne("BiblioMit.Models.Psmb", "ConsessionOrResearch")
                        .WithMany("Contacts")
                        .HasForeignKey("ConsessionOrResearchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiblioMit.Models.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("BiblioMit.Models.Coordinate", b =>
                {
                    b.HasOne("BiblioMit.Models.Polygon", "Polygon")
                        .WithMany("Vertices")
                        .HasForeignKey("PolygonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BiblioMit.Models.Entities.Digest.Header", b =>
                {
                    b.HasOne("BiblioMit.Models.Registry", "Registry")
                        .WithMany("Headers")
                        .HasForeignKey("RegistryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BiblioMit.Models.Entities.Environmental.GenusPhytoplankton", b =>
                {
                    b.HasOne("BiblioMit.Models.PhylogeneticGroup", "Group")
                        .WithMany("GenusPhytoplanktons")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BiblioMit.Models.Entry", b =>
                {
                    b.HasOne("BiblioMit.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("BiblioMit.Models.Individual", b =>
                {
                    b.HasOne("BiblioMit.Models.Sampling", "Sampling")
                        .WithMany("Individuals")
                        .HasForeignKey("SamplingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BiblioMit.Models.Larva", b =>
                {
                    b.HasOne("BiblioMit.Models.Larvae", "Larvae")
                        .WithMany("Larva")
                        .HasForeignKey("LarvaeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiblioMit.Models.Specie", "Specie")
                        .WithMany()
                        .HasForeignKey("SpecieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BiblioMit.Models.Larvae", b =>
                {
                    b.HasOne("BiblioMit.Models.Entities.Centres.Farm", "Farm")
                        .WithMany("Larvaes")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BiblioMit.Models.Photo", b =>
                {
                    b.HasOne("BiblioMit.Models.Individual", "Individual")
                        .WithMany()
                        .HasForeignKey("IndividualId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiblioMit.Models.Soft", null)
                        .WithMany("Photos")
                        .HasForeignKey("SoftId");

                    b.HasOne("BiblioMit.Models.Valve", null)
                        .WithMany("Photos")
                        .HasForeignKey("ValveId");
                });

            modelBuilder.Entity("BiblioMit.Models.Phytoplankton", b =>
                {
                    b.HasOne("BiblioMit.Models.PlanktonAssay", "PlanktonAssay")
                        .WithMany("Phytoplanktons")
                        .HasForeignKey("PlanktonAssayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiblioMit.Models.SpeciesPhytoplankton", "Species")
                        .WithMany("Phytoplanktons")
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BiblioMit.Models.PlanktonAssay", b =>
                {
                    b.HasOne("BiblioMit.Models.Analist", "Analist")
                        .WithMany("PlanktonAssays")
                        .HasForeignKey("AnalistId");

                    b.HasOne("BiblioMit.Models.Laboratory", "Laboratory")
                        .WithMany("PlanktonAssays")
                        .HasForeignKey("LaboratoryId");

                    b.HasOne("BiblioMit.Models.Phone", "Phone")
                        .WithMany()
                        .HasForeignKey("PhoneId");

                    b.HasOne("BiblioMit.Models.Psmb", "Psmb")
                        .WithMany("PlanktonAssays")
                        .HasForeignKey("PsmbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiblioMit.Models.SamplingEntity", "SamplingEntity")
                        .WithMany("PlanktonAssays")
                        .HasForeignKey("SamplingEntityId");

                    b.HasOne("BiblioMit.Models.Station", "Station")
                        .WithMany("PlanktonAssays")
                        .HasForeignKey("StationId");
                });

            modelBuilder.Entity("BiblioMit.Models.PlanktonAssayEmail", b =>
                {
                    b.HasOne("BiblioMit.Models.Email", "Email")
                        .WithMany("PlanktonAssayEmails")
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiblioMit.Models.PlanktonAssay", "PlanktonAssay")
                        .WithMany("Emails")
                        .HasForeignKey("PlanktonAssayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BiblioMit.Models.PlantProduct", b =>
                {
                    b.HasOne("BiblioMit.Models.Entities.Centres.Plant", "Plant")
                        .WithMany("Products")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiblioMit.Models.Product", "Product")
                        .WithMany("Plants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BiblioMit.Models.Polygon", b =>
                {
                    b.HasOne("BiblioMit.Models.Locality", "Locality")
                        .WithMany("Polygons")
                        .HasForeignKey("LocalityId");
                });

            modelBuilder.Entity("BiblioMit.Models.Post", b =>
                {
                    b.HasOne("BiblioMit.Models.Forum", "Forum")
                        .WithMany("Posts")
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiblioMit.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("BiblioMit.Models.PostReply", b =>
                {
                    b.HasOne("BiblioMit.Models.Post", "Post")
                        .WithMany("Replies")
                        .HasForeignKey("PostId");

                    b.HasOne("BiblioMit.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("BiblioMit.Models.Psmb", b =>
                {
                    b.HasOne("BiblioMit.Models.Commune", "Commune")
                        .WithMany("Psmbs")
                        .HasForeignKey("CommuneId");

                    b.HasOne("BiblioMit.Models.Company", "Company")
                        .WithMany("Psmbs")
                        .HasForeignKey("CompanyId");

                    b.HasOne("BiblioMit.Models.Polygon", "Polygon")
                        .WithOne("Psmb")
                        .HasForeignKey("BiblioMit.Models.Psmb", "PolygonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BiblioMit.Models.Registry", b =>
                {
                    b.HasOne("BiblioMit.Models.InputFile", "InputFile")
                        .WithMany("Registries")
                        .HasForeignKey("InputFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BiblioMit.Models.ReproductiveStage", b =>
                {
                    b.HasOne("BiblioMit.Models.Spawning", "Spawning")
                        .WithMany("Stage")
                        .HasForeignKey("SpawningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BiblioMit.Models.Sampling", b =>
                {
                    b.HasOne("BiblioMit.Models.Psmb", "Centre")
                        .WithMany("Samplings")
                        .HasForeignKey("CentreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BiblioMit.Models.Seed", b =>
                {
                    b.HasOne("BiblioMit.Models.Entities.Centres.Farm", "Farm")
                        .WithMany("Seeds")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BiblioMit.Models.SernapescaDeclaration", b =>
                {
                    b.HasOne("BiblioMit.Models.Psmb", "Centre")
                        .WithMany("Declarations")
                        .HasForeignKey("CentreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BiblioMit.Models.Soft", b =>
                {
                    b.HasOne("BiblioMit.Models.Individual", "Individual")
                        .WithMany("Softs")
                        .HasForeignKey("IndividualId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BiblioMit.Models.Spawning", b =>
                {
                    b.HasOne("BiblioMit.Models.Entities.Centres.Farm", "Farm")
                        .WithMany("Spawnings")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BiblioMit.Models.SpecieSeed", b =>
                {
                    b.HasOne("BiblioMit.Models.Seed", "Seed")
                        .WithMany("Specie")
                        .HasForeignKey("SeedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiblioMit.Models.Specie", "Specie")
                        .WithMany("SpecieSeeds")
                        .HasForeignKey("SpecieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BiblioMit.Models.SpeciesPhytoplankton", b =>
                {
                    b.HasOne("BiblioMit.Models.Entities.Environmental.GenusPhytoplankton", "Genus")
                        .WithMany("SpeciesPhytoplanktons")
                        .HasForeignKey("GenusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BiblioMit.Models.Talla", b =>
                {
                    b.HasOne("BiblioMit.Models.SpecieSeed", "SpecieSeed")
                        .WithMany("Tallas")
                        .HasForeignKey("SpecieSeedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BiblioMit.Models.Valve", b =>
                {
                    b.HasOne("BiblioMit.Models.Individual", "Individual")
                        .WithMany("Valves")
                        .HasForeignKey("IndividualId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("BiblioMit.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BiblioMit.Models.ApplicationRole", null)
                        .WithMany("Claims")
                        .HasForeignKey("ApplicationRoleId");

                    b.HasOne("BiblioMit.Models.ApplicationUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BiblioMit.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("BiblioMit.Models.ApplicationRole", null)
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiblioMit.Models.ApplicationUser", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BiblioMit.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BiblioMit.Models.Commune", b =>
                {
                    b.HasOne("BiblioMit.Models.CatchmentArea", "CatchmentArea")
                        .WithMany("Communes")
                        .HasForeignKey("CatchmentAreaId");

                    b.HasOne("BiblioMit.Models.Province", "Province")
                        .WithMany("Communes")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BiblioMit.Models.Province", b =>
                {
                    b.HasOne("BiblioMit.Models.Region", "Region")
                        .WithMany("Provinces")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BiblioMit.Models.Entities.Centres.Farm", b =>
                {
                    b.HasOne("BiblioMit.Models.PsmbArea", "PsmbArea")
                        .WithMany("Farms")
                        .HasForeignKey("PsmbAreaId");
                });

            modelBuilder.Entity("BiblioMit.Models.HarvestDeclaration", b =>
                {
                    b.HasOne("BiblioMit.Models.Origin", "Origin")
                        .WithMany()
                        .HasForeignKey("OriginId");
                });

            modelBuilder.Entity("BiblioMit.Models.ProductionDeclaration", b =>
                {
                    b.HasOne("BiblioMit.Models.Origin", "Origin")
                        .WithMany()
                        .HasForeignKey("OriginId");

                    b.HasOne("BiblioMit.Models.Entities.Centres.Plant", null)
                        .WithMany("ProductionDeclarations")
                        .HasForeignKey("PlantId");
                });

            modelBuilder.Entity("BiblioMit.Models.SeedDeclaration", b =>
                {
                    b.HasOne("BiblioMit.Models.Origin", "Origin")
                        .WithMany("Seeds")
                        .HasForeignKey("OriginId")
                        .HasConstraintName("FK_SernapescaDeclarations_Origins_OriginId1");
                });

            modelBuilder.Entity("BiblioMit.Models.SupplyDeclaration", b =>
                {
                    b.HasOne("BiblioMit.Models.Entities.Centres.Craft", null)
                        .WithMany("SupplyDeclarations")
                        .HasForeignKey("CraftId");

                    b.HasOne("BiblioMit.Models.Origin", "Origin")
                        .WithMany()
                        .HasForeignKey("OriginId");

                    b.HasOne("BiblioMit.Models.Entities.Centres.Plant", null)
                        .WithMany("SupplyDeclarations")
                        .HasForeignKey("PlantId");
                });
#pragma warning restore 612, 618
        }
    }
}
