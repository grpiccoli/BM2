@page "/bz/"

@using GoogleMapsComponents
@using GoogleMapsComponents.Maps
@using BiblioMit.Models

@inject IEnvironmental service

<div class="container-fluid">
    <div class="row">
        <div class="col-4">
            <div class="row">
                <div class="col">
                    <DateRangePicker class="form-control actual_range" OnRangeSelect="OnRangeSelect"
                                     Culture="@CultureInfo.CurrentUICulture"
                                     @bind-StartDate="form.Start" @bind-EndDate="form.End" />
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <Typeahead SearchMethod="@SearchVariablesAsync"
                               Items="form.Variables"
                               @bind-Values="@SelectedVariables"
                               Placeholder="Variables">
                        <SelectedTemplate Context="variable">
                            @variable.GetAttrName()
                        </SelectedTemplate>
                        <ResultTemplate Context="variable">
                            @variable.GetAttrName()
                        </ResultTemplate>
                    </Typeahead>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <Typeahead SearchMethod="@SearchOrdersAsync"
                               Items="form.Orders"
                               @bind-Values="@SelectedOrders"
                               Placeholder="Órdenes fitoplancton">
                        <SelectedTemplate Context="order">
                            @order.Text
                        </SelectedTemplate>
                        <ResultTemplate Context="order">
                            @order.Text
                        </ResultTemplate>
                    </Typeahead>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <Typeahead SearchMethod="@SearchGenusAsync"
                               Items="form.Genus"
                               @bind-Values="@SelectedGenus"
                               Placeholder="Generos fitoplancton">
                        <SelectedTemplate Context="genus">
                            @genus.Text
                        </SelectedTemplate>
                        <ResultTemplate Context="genus">
                            @genus.Text
                        </ResultTemplate>
                    </Typeahead>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <Typeahead SearchMethod="@SearchSpAsync"
                               Items="form.Sp"
                               @bind-Values="@SelectedSp"
                               Placeholder="Especies fitoplancton">
                        <SelectedTemplate Context="sp">
                            @sp.Text
                        </SelectedTemplate>
                        <ResultTemplate Context="sp">
                            @sp.Text
                        </ResultTemplate>
                    </Typeahead>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <Typeahead SearchMethod="@SearchCatchmentsAsync"
                               Items="form.Catchments"
                               @bind-Values="@SelectedCatchments"
                               Placeholder="Cuencas">
                        <SelectedTemplate Context="catchment">
                            @catchment.Text
                        </SelectedTemplate>
                        <ResultTemplate Context="catchment">
                            @catchment.Text
                        </ResultTemplate>
                    </Typeahead>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <Typeahead SearchMethod="@SearchCommunesAsync"
                               Items="form.Communes"
                               @bind-Values="@SelectedCommunes"
                               Placeholder="Comunas">
                        <SelectedTemplate Context="commune">
                            @commune.Text
                        </SelectedTemplate>
                        <ResultTemplate Context="commune">
                            @commune.Text
                        </ResultTemplate>
                    </Typeahead>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <Typeahead SearchMethod="@SearchPsmbsAsync"
                               Items="form.Psmbs"
                               @bind-Values="@SelectedPsmbs"
                               Placeholder="Áreas PSMB">
                        <SelectedTemplate Context="psmb">
                            @psmb.Text
                        </SelectedTemplate>
                        <ResultTemplate Context="psmb">
                            @psmb.Text
                        </ResultTemplate>
                    </Typeahead>
                </div>
            </div>
            @*<div id="semaforo" class="row @(User.Identity.IsAuthenticated ? "" : "d-none")">
                    <div class="container-fluid">
                        <div class="row">
                            <select class="form-control" id="tl" multiple></select>
                        </div>
                        <div class="row">
                            <a id="info" href="#" data-toogle="popover" data-placement="right" title="Requerimientos variables semáforo">
                                <i class="fas fa-question-circle fa-tw"> tabla de ayuda semáforo</i>
                            </a>
                        </div>
                    </div>
                </div>*@
        </div>
        <div class="col-8">
            <GoogleMap @ref="@map" Id="map" Options="@mapOptions"></GoogleMap>
        </div>
    </div>
    <div class="row">
        <div class="chartdiv w-100" style="height:400px;">
            <RadzenChart>
                @foreach (var data in form.Datas)
                {
                    <RadzenLineSeries Smooth="false" Data="@data.Dots.ToArray()" CategoryProperty="Date" Title="@data.Title" LineType="LineType.Solid" ValueProperty="Y">
                        <RadzenMarkers MarkerType="MarkerType.None" />
                    </RadzenLineSeries>
                }
                <RadzenCategoryAxis Padding="20" FormatString="{0:MMM YY}" />
                <RadzenValueAxis Formatter="@FormatY">
                    <RadzenGridLines Visible="true" />
                    <RadzenAxisTitle Text="Valor" />
                </RadzenValueAxis>
            </RadzenChart>
        </div>
    </div>
</div>

<div id="infotable" class="d-none" style="float:right;">
    <table class="small table-striped text-center w-100">
        <tr>
            <th>Análisis</th>
            <th>PSMB</th>
            <th>Especie</th>
            <th>Talla</th>
            <th>Larva</th>
            <th>Est.Repr.</th>
            <th>Sexo</th>
        </tr>
        <tr>
            <th class="text-left">Captura por Especie</th>
            <td>&#x2713;</td>
            <td>&#x2713;</td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
        </tr>
        <tr>
            <th class="text-left">% Especie</th>
            <td>&#x2713;</td>
            <td>&#x2713;</td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
        </tr>
        <tr>
            <th class="text-left">% Talla por Especie</th>
            <td>&#x2713;</td>
            <td>&#x2713;</td>
            <td>&#x2713;</td>
            <td></td>
            <td></td>
            <td></td>
        </tr>
        <tr>
            <th class="text-left">Prom Larvas por Especie</th>
            <td>&#x2713;</td>
            <td>&#x2713;</td>
            <td></td>
            <td>&#x2713;</td>
            <td></td>
            <td></td>
        </tr>
        <tr>
            <th class="text-left">IG Reproductores</th>
            <td>&#x2713;</td>
            <td>&#x2713;</td>
            <td></td>
            <td></td>
            <td></td>
            <td>&#x2713;</td>
        </tr>
        <tr>
            <th class="text-left">% Est.Repr.</th>
            <td>&#x2713;</td>
            <td>&#x2713;</td>
            <td></td>
            <td></td>
            <td>&#x2713;</td>
            <td></td>
        </tr>
        <tr>
            <th class="text-left">% Sexo</th>
            <td>&#x2713;</td>
            <td>&#x2713;</td>
            <td></td>
            <td></td>
            <td></td>
            <td>&#x2713;</td>
        </tr>
    </table>
</div>

@code {
    //map
    private GoogleMap map;
    private MapOptions mapOptions;
    //chart
    string FormatY(object value)
    {
        return ((double)value).ToString(CultureInfo.InvariantCulture);
    }
    //init
    private EnvironmentalForm form = new EnvironmentalForm();
    //searchers
    public IList<SelectListItem> SelectedOrders { get; set; } = new List<SelectListItem>();
    public IList<SelectListItem> SelectedGenus { get; set; } = new List<SelectListItem>();
    public IList<SelectListItem> SelectedSp { get; set; } = new List<SelectListItem>();
    public IList<SelectListItem> SelectedCommunes { get; set; } = new List<SelectListItem>();
    public IList<SelectListItem> SelectedPsmbs { get; set; } = new List<SelectListItem>();
    private IList<SelectListItem> selectedCatchments { get; set; } = new List<SelectListItem>();
    public IList<SelectListItem> SelectedCatchments
    {
        get
        {
            return selectedCatchments;
        }
        set
        {
            selectedCatchments = CatchChange(selectedCatchments, value);
        }
    }
    private IList<SelectListItem> CatchChange(IList<SelectListItem> oldVars, IList<SelectListItem> newVars)
    {
        if (form.Start.HasValue && form.End.HasValue)
        {
            var oldNotNew = oldVars.ExceptNull(newVars).ToList();
            var newNotOld = newVars.ExceptNull(oldVars).ToList();
        }
        return newVars;
    }
    private IList<Variable> selectedVariables { get; set; } = new List<Variable>();
    public IList<Variable> SelectedVariables
    {
        get
        {
            return selectedVariables;
        }
        set
        {
            selectedVariables = VarChangeAsync(selectedVariables, value).Result;
        }
    }
    protected override async Task OnInitializedAsync()
    {
        form.Start = service.GetMinDate();
        form.End = service.GetMaxDate();
        form.Orders = await service.GetPhytoplanktonOrders().ConfigureAwait(false);
        form.Genus = await service.GetPhytoplanktonGenus().ConfigureAwait(false);
        form.Sp = await service.GetPhytoplanktonSp().ConfigureAwait(false);
        form.Communes = await service.GetCommunes().ConfigureAwait(false);
        form.Catchments = await service.GetCatchments().ConfigureAwait(false);
        form.Psmbs = await service.GetPsmbs().ConfigureAwait(false);
        form.Datas.Add(await service.GetData(
                            form.Start.Value,
                            form.End.Value,
                            LocationType.Cuenca,
                            1,
                            "Cuenca Norte",
                            Variable.t).ConfigureAwait(false));
        mapOptions = new MapOptions()
        {
            Zoom = 8,
            Center = new LatLngLiteral()
            {
                //Chulín
                Lat = -42.6220283,
                Lng = -73.0419269
            },
            MapTypeId = MapTypeId.Terrain
        };
        InfoWindowOptions infoWindowOptions = new InfoWindowOptions()
        {
            PixelOffset = new Size()
            {
                Height = 50,
                Width = 150
            }
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SetPolygons(
                await service.GetCuencaPolygonsAsync().ConfigureAwait(false),
                nameof(CatchmentArea)).ConfigureAwait(false);
            await SetPolygons(
                await service.GetCommunePolygonsAsync().ConfigureAwait(false),
                nameof(Commune)).ConfigureAwait(false);
            await SetPolygons(
                await service.GetPsmbPolygonsAsync().ConfigureAwait(false),
                nameof(PsmbArea)).ConfigureAwait(false);
        }
    }

    public async Task SetPolygons(IEnumerable<PolygonOptions> polygons, string type)
    {
        foreach (var p in polygons)
        {
            var pol = await GoogleMapsComponents.Maps.Polygon.CreateAsync(map.JsRuntime, p);
            await pol.AddListener<MouseEvent>("click", async (e) =>
            {
                bool select = GraphClick(p.ZIndex.ToString(), type);
                string color = select ? "red" : "";
                await pol.SetOptions(new PolygonOptions
                {
                    FillColor = color,
                    StrokeColor = color
                }).ConfigureAwait(false);
            }).ConfigureAwait(false);
            await pol.SetMap(map.InteropObject).ConfigureAwait(false);
        }
    }

    public bool GraphClick(string id, string type)
    {
        var list = type switch
        {
            nameof(CatchmentArea) => selectedCatchments,
            nameof(Commune) => SelectedCommunes,
            nameof(PsmbArea) => SelectedPsmbs,
            _ => null
        };
        if (list != null)
        {
            var item = list.FirstOrDefault(c => c.Value == id);
            if (item != null)
            {
                list.Remove(item);
                return false;
            }
        }
        var formlist = type switch
        {
            nameof(CatchmentArea) => form.Catchments,
            nameof(Commune) => form.Communes,
            nameof(PsmbArea) => form.Psmbs,
            _ => null
        };
        var selectedItem = formlist.FirstOrDefault(c => c.Value == id);
        list.Add(selectedItem);
        return true;
    }

    public void OnRangeSelect(DateRange range)
    {
        //Use range.Start and range.End here
        //form.Datas.Clear();
    }

    private async Task<IList<Variable>> VarChangeAsync(IList<Variable> oldVars, IList<Variable> newVars)
    {
        if (form.Start.HasValue && form.End.HasValue)
        {
            var oldNotNew = oldVars.ExceptNull(newVars).ToList();
            var newNotOld = newVars.ExceptNull(oldVars).ToList();

            //variable removed
            if (oldNotNew.Any())
            {

            }
            //variable added
            if (newNotOld.Any())
            {
                foreach (var catchment in SelectedCatchments)
                {
                    var id = catchment.Value.ParseInt();
                    if (id.HasValue)
                        form.Datas.Add(await service.GetData(
                            form.Start.Value,
                            form.End.Value,
                            LocationType.Cuenca,
                            id.Value,
                            catchment.Text,
                            newNotOld[0]).ConfigureAwait(false));
                }
            }
        }
        return newVars;
    }

    public async Task<IEnumerable<Variable>> SearchVariablesAsync(string searchText) =>
        await Task.FromResult<IEnumerable<Variable>>(form.Variables.Where(x =>
    x.GetAttrName().Contains(searchText, StringComparison.OrdinalIgnoreCase)));

    public async Task<IEnumerable<SelectListItem>> SearchOrdersAsync(string searchText) =>
        await Task.FromResult<IEnumerable<SelectListItem>>(form.Orders.Where(x =>
            x.Text.Contains(searchText, StringComparison.OrdinalIgnoreCase)));

    public async Task<IEnumerable<SelectListItem>> SearchGenusAsync(string searchText) =>
        await Task.FromResult<IEnumerable<SelectListItem>>(form.Genus.Where(x =>
            x.Text.Contains(searchText, StringComparison.OrdinalIgnoreCase)));

    public async Task<IEnumerable<SelectListItem>> SearchSpAsync(string searchText) =>
        await Task.FromResult<IEnumerable<SelectListItem>>(form.Sp.Where(x =>
            x.Text.Contains(searchText, StringComparison.OrdinalIgnoreCase)));

    public async Task<IEnumerable<SelectListItem>> SearchCatchmentsAsync(string searchText) =>
    await Task.FromResult<IEnumerable<SelectListItem>>(form.Catchments.Where(x =>
        x.Text.Contains(searchText, StringComparison.OrdinalIgnoreCase)));

    public async Task<IEnumerable<SelectListItem>> SearchCommunesAsync(string searchText) =>
    await Task.FromResult<IEnumerable<SelectListItem>>(form.Communes.Where(x =>
        x.Text.Contains(searchText, StringComparison.OrdinalIgnoreCase)));

    public async Task<IEnumerable<SelectListItem>> SearchPsmbsAsync(string searchText) =>
        await Task.FromResult<IEnumerable<SelectListItem>>(form.Psmbs.Where(x =>
            x.Text.Contains(searchText, StringComparison.OrdinalIgnoreCase)));
}